import pandas as pd
from collections import Counter
import time
start_time = time.time()

lissite = ['BKG111','BSK722','DUM290','PAR525','PBR006','PBR146','PBR209','PBR624','PBR707','PBR770','PBR880','PBR908','PKR539','PKR932','PPN394'] ## ===> site yg dibuat IRR nya


pelengkap = r"D:\TSEL\filepelengkap\pelengkap_IRR.xlsx"
dirpath = r"D:\TSEL\MCOM_TSEL_W35_2024\MCOM_R10_4G_TSEL_W35_2024\MCOM_R10_4G_TSEL_W35_2024.xlsx" ###==== file MCOM========
mcom = pd.read_excel(dirpath)
mcom = pd.DataFrame(mcom)
heder = ['VENDOR','SITE_ID','NE_ID','SITE_NAME','LONG','LAT','BAND','BTS_TYPE','SECTOR','ANTENA_HEIGHT','ANTENA_TYPE']
simpan = r'D:\TSEL\RCI'
##====RRU============
librru = r"D:\TSEL\Inventory\Jumlah RRU combine.xlsx"
dfrru = pd.read_excel(librru)
dfrru = pd.DataFrame(dfrru)
#=================
head_IRR = ['ID_UNIK','JPP','PLAN_CAPEX_PAPER','AREA','REGION','VENDOR','SITE_ID','NE_ID','SITE_NAME','LONG','LAT','SYSTEM','BAND','BTS_TYPE','SECTOR','BANDWIDTH','OBJECTIVE','PROGRAM_CAPEX','SOW_EQP','REG_REV_PREDICTION','TARGET_ON_AIR_MONTH','INFRA_TYPE','PLAN_ORDER_INFRA','PLAN_TOWER_PROVIDER','ANTENA_HEIGHT','ANTENA_TYPE','POWER_SOURCE','SOW_PS','TRANSPORT_TYPE','SOW_TRANSPORT','REG_CAPEX','OPEX_MANDATORY','SITE_ID_DONOR','SECTOR_DONOR','RELOCATION_TYPE','REMARKS','MANDATORY_FLAG','MANDATORY_FLAG_2','RADIO_QTY','SCOPE_RADIO','BASEBAND_QTY','SCOPE_BASEBAND','CAPEX_EQP','CAPEX_PS','OBJECTIVE_REGION','OBJECTIVE_HQ','REMARK SOW','Noted SOW','Objective SOW','Remarks']
data = []
filename = 'IRR.xlsx'
dp = pd.read_excel(pelengkap)
dp = pd.DataFrame(dp)
dp = dp.fillna('-')
idunik = dp.loc[0,'ID_UNIK']
jpp = dp.loc[0,'JPP']
plancap = dp.loc[0,'PLAN_CAPEX_PAPER']
area = dp.loc[0,'AREA']
region = dp.loc[0,'REGION']
vendor = dp.loc[0,'VENDOR']
system = dp.loc[0,'SYSTEM']
bandwidth = dp.loc[0,'BANDWIDTH']
objective = dp.loc[0,'OBJECTIVE']
programcapex = dp.loc[0,'PROGRAM_CAPEX']
soweqp = dp.loc[0,'SOW_EQP']
regprediction = dp.loc[0,'REG_REV_PREDICTION']
targetmonth = dp.loc[0,'TARGET_ON_AIR_MONTH']
infratype = dp.loc[0,'INFRA_TYPE']
planinfra = dp.loc[0,'PLAN_ORDER_INFRA']
planprovider = dp.loc[0,'PLAN_TOWER_PROVIDER']
powersource = dp.loc[0,'POWER_SOURCE']
sowps = dp.loc[0,'SOW_PS']
transporttype = dp.loc[0,'TRANSPORT_TYPE']
sowtransport = dp.loc[0,'SOW_TRANSPORT']
regcapex = dp.loc[0,'REG_CAPEX']
opexmandatory = dp.loc[0,'OPEX_MANDATORY']
sitedonor = dp.loc[0,'SITE_ID_DONOR']
sectordonor = dp.loc[0,'SECTOR_DONOR']
relocationtype = dp.loc[0,'RELOCATION_TYPE']
remarks = dp.loc[0,'REMARKS']
mandatoryflag = dp.loc[0,'MANDATORY_FLAG']
mandatory2 = dp.loc[0,'MANDATORY_FLAG_2']
radioqty = dp.loc[0,'RADIO_QTY']
scoperadio = dp.loc[0,'SCOPE_RADIO']
basebandqty = dp.loc[0,'BASEBAND_QTY']
scopebaseband = dp.loc[0,'SCOPE_BASEBAND']
capexeqp = dp.loc[0,'CAPEX_EQP']
capexps = dp.loc[0,'CAPEX_PS']
objectiveregion = dp.loc[0,'OBJECTIVE_REGION']
objectivehq = dp.loc[0,'OBJECTIVE_HQ']
remsow = dp.loc[0,'REMARK SOW']
notsow = dp.loc[0,'Noted SOW']
objsow = dp.loc[0,'Objective SOW']
remarks = dp.loc[0,'Remarks']

#====================
df = mcom[['Site ID','NE ID','Site_Name','Longitude','Latitude','Legend','Cell_Type','Sector','Antenna Height ','Ant_Type']]
# lissite = set(df['Site ID'])
# lissite = ['BKG111','PKR539','PBR908'] ## ===> site yg dibuat IRR nya
# df['Site ID'] =  df['eNodeB Name'].str.split('_').str[0]

def satu ():
        SITE_ID,NE_ID,SITE_NAME,LONG,LAT,BAND,BTS_TYPE,SECTOR,ANTENA_HEIGHT,ANTENA_TYPE = dq.loc[0,'Site ID'],dq.loc[0,'NE ID'],dq.loc[0,'Site_Name'],dq.loc[0,'Longitude'],dq.loc[0,'Latitude'],dq.loc[0,'Legend'],dq.loc[0,'Cell_Type'],f'{dq.loc[0,'Sector']}',dq.loc[0,'Antenna Height '],dq.loc[0,'Ant_Type']
        data.append([idunik,jpp,plancap,area,region,vendor,SITE_ID,NE_ID,SITE_NAME,LONG,LAT,system,BAND,BTS_TYPE,SECTOR,bandwidth,objective,programcapex,soweqp,regprediction,targetmonth,infratype,planinfra,planprovider,ANTENA_HEIGHT,ANTENA_TYPE,powersource,sowps,transporttype,sowtransport,regcapex,opexmandatory,sitedonor,sectordonor,relocationtype,remarks,mandatoryflag,mandatory2,radioqty,scoperadio,basebandqty,scopebaseband,capexeqp,capexps,objectiveregion,objectivehq,remsow,notsow,objsow,remarks])
def dua ():
    try:
        SITE_ID,NE_ID,SITE_NAME,LONG,LAT,BAND,BTS_TYPE,SECTOR,ANTENA_HEIGHT,ANTENA_TYPE = dq.loc[0,'Site ID'],dq.loc[0,'NE ID'],dq.loc[0,'Site_Name'],dq.loc[0,'Longitude'],dq.loc[0,'Latitude'],dq.loc[0,'Legend'],dq.loc[0,'Cell_Type'],f'{dq.loc[0,'Sector']}_{dq.loc[1,'Sector']}',dq.loc[0,'Antenna Height '],dq.loc[0,'Ant_Type']
        data.append([idunik,jpp,plancap,area,region,vendor,SITE_ID,NE_ID,SITE_NAME,LONG,LAT,system,BAND,BTS_TYPE,SECTOR,bandwidth,objective,programcapex,soweqp,regprediction,targetmonth,infratype,planinfra,planprovider,ANTENA_HEIGHT,ANTENA_TYPE,powersource,sowps,transporttype,sowtransport,regcapex,opexmandatory,sitedonor,sectordonor,relocationtype,remarks,mandatoryflag,mandatory2,radioqty,scoperadio,basebandqty,scopebaseband,capexeqp,capexps,objectiveregion,objectivehq,remsow,notsow,objsow,remarks])
    except:pass
def tiga ():
    try:
        SITE_ID,NE_ID,SITE_NAME,LONG,LAT,BAND,BTS_TYPE,SECTOR,ANTENA_HEIGHT,ANTENA_TYPE = dq.loc[0,'Site ID'],dq.loc[0,'NE ID'],dq.loc[0,'Site_Name'],dq.loc[0,'Longitude'],dq.loc[0,'Latitude'],dq.loc[0,'Legend'],dq.loc[0,'Cell_Type'],f'{dq.loc[0,'Sector']}_{dq.loc[1,'Sector']}_{dq.loc[2,'Sector']}',dq.loc[0,'Antenna Height '],dq.loc[0,'Ant_Type']
        data.append([idunik,jpp,plancap,area,region,vendor,SITE_ID,NE_ID,SITE_NAME,LONG,LAT,system,BAND,BTS_TYPE,SECTOR,bandwidth,objective,programcapex,soweqp,regprediction,targetmonth,infratype,planinfra,planprovider,ANTENA_HEIGHT,ANTENA_TYPE,powersource,sowps,transporttype,sowtransport,regcapex,opexmandatory,sitedonor,sectordonor,relocationtype,remarks,mandatoryflag,mandatory2,radioqty,scoperadio,basebandqty,scopebaseband,capexeqp,capexps,objectiveregion,objectivehq,remsow,notsow,objsow,remarks])
    except:pass
def proses ():
    try:
        SITE_ID,NE_ID,SITE_NAME,LONG,LAT,BAND,BTS_TYPE,SECTOR,ANTENA_HEIGHT,ANTENA_TYPE = dq.loc[0,'Site ID'],dq.loc[0,'NE ID'],dq.loc[0,'Site_Name'],dq.loc[0,'Longitude'],dq.loc[0,'Latitude'],dq.loc[0,'Legend'],dq.loc[0,'Cell_Type'],f'{dq.loc[0,'Sector']}_{dq.loc[1,'Sector']}_{dq.loc[2,'Sector']}',dq.loc[0,'Antenna Height '],dq.loc[0,'Ant_Type']
        data.append([idunik,jpp,plancap,area,region,vendor,SITE_ID,NE_ID,SITE_NAME,LONG,LAT,system,BAND,BTS_TYPE,SECTOR,bandwidth,objective,programcapex,soweqp,regprediction,targetmonth,infratype,planinfra,planprovider,ANTENA_HEIGHT,ANTENA_TYPE,powersource,sowps,transporttype,sowtransport,regcapex,opexmandatory,sitedonor,sectordonor,relocationtype,remarks,mandatoryflag,mandatory2,radioqty,scoperadio,basebandqty,scopebaseband,capexeqp,capexps,objectiveregion,objectivehq,remsow,notsow,objsow,remarks])
    except:pass

for s in lissite:
    ds = df[df['Site ID'] == s]
    
    lisband = ['L1800']#set(ds['Legend'])
    for band in lisband:
        dq = ds[ds['Legend'] == band].reset_index()
        if len(dq['Site ID']) == 1: 
            satu ()
        elif len(dq['Site ID']) == 2: 
            dua ()
        elif len(dq['Site ID']) == 3: 
            tiga ()
        else:
            proses()
dafi = pd.DataFrame(data,columns=head_IRR)


###==================BOQ=====================
hedboq = ['Site ID PO','NE_ID','Site name PO','LONG','LAT','SECTOR','Existing Band','Ant L900','Ant L1800','Ant L2100','Ant L2300','Height Ant L900','Height Ant L1800','Height Ant L2100','Height Ant L2300','Type RRU L900','Type RRU L1800','Type RRU L2100','Type RRU L2300','Vendor RAN']
dboq = mcom[['VENDOR','Site ID','NE ID','Site_Name','Longitude','Latitude','EUtranCell','Antenna Height ','Ant_Type','Legend','toco']]
dboq['Sector'] = dboq['EUtranCell'].str[-1]
datboq = []

for s in lissite:
    ds = dboq[dboq['Site ID'] == s].reset_index()
    rru = dfrru[dfrru['Site ID']==s] ##ambil data rru
    existband = set(ds['Legend'])
    eb = ''
    for b in existband:
         eb = f'{eb}/{b}'
    eb = eb.replace('/','',1)
    lisband = ['L900','L1800','L2100','L2300']
    antL9=antl18=antl21=antl23 = '-'
    for band in lisband:
        if band == 'L900':
            dq = ds[ds['Legend'] == band].reset_index()
            if len(dq['Site ID']) >= 3:
                secl9,ahl9,antL9 = f'{dq.loc[0,'Sector']}_{dq.loc[1,'Sector']}_{dq.loc[2,'Sector']}',f'{dq.loc[0,'Antenna Height ']}',f'{dq.loc[0,'Ant_Type']}/{dq.loc[1,'Ant_Type']}/{dq.loc[2,'Ant_Type']}'
            rrub = rru[rru['band']==band]
            nrru = list(rrub['Type RRU'].to_list()) ##hitung rru
            jmlrru = Counter(nrru)
            ru9 = ''
            for k,v in jmlrru.items():
                ru9 = f'{ru9}+{v}*{k}'
            ru9 = ru9.replace('+','',1)
        elif band == 'L1800':
            dq = ds[ds['Legend'] == band].reset_index()
            if len(dq['Site ID']) >= 3:
                secl18,ahl18,antl18 = f'{dq.loc[0,'Sector']}_{dq.loc[1,'Sector']}_{dq.loc[2,'Sector']}',f'{dq.loc[0,'Antenna Height ']}',f'{dq.loc[0,'Ant_Type']}/{dq.loc[1,'Ant_Type']}/{dq.loc[2,'Ant_Type']}'
            rrub = rru[rru['band']==band]
            nrru = list(rrub['Type RRU'].to_list()) ##hitung rru
            jmlrru = Counter(nrru)
            ru18 = ''
            for k,v in jmlrru.items():
                ru18 = f'{ru18}+{v}*{k}'
            ru18 = ru18.replace('+','',1)
        elif band == 'L2100':
            dq = ds[ds['Legend'] == band].reset_index()
            if len(dq['Site ID']) >= 3:
                secl21,ahl21,antl21 = f'{dq.loc[0,'Sector']}_{dq.loc[1,'Sector']}_{dq.loc[2,'Sector']}',f'{dq.loc[0,'Antenna Height ']}',f'{dq.loc[0,'Ant_Type']}/{dq.loc[1,'Ant_Type']}/{dq.loc[2,'Ant_Type']}'
            rrub = rru[rru['band']==band]
            nrru = list(rrub['Type RRU'].to_list()) ##hitung rru
            jmlrru = Counter(nrru)
            ru21 = ''
            for k,v in jmlrru.items():
                ru21 = f'{ru21}+{v}*{k}'
            ru21 = ru21.replace('+','',1)
        elif band == 'L2300':
            dq = ds[ds['Legend'] == band].reset_index()
            if len(dq['Site ID']) >= 3:
                secl23,ahl23,antl23 = f'{dq.loc[0,'Sector']}_{dq.loc[1,'Sector']}_{dq.loc[2,'Sector']}',f'{dq.loc[0,'Antenna Height ']}',f'{dq.loc[0,'Ant_Type']}/{dq.loc[1,'Ant_Type']}/{dq.loc[2,'Ant_Type']}'
            rrub = rru[rru['band']==band]
            nrru = list(rrub['Type RRU'].to_list()) ##hitung rru
            jmlrru = Counter(nrru)
            ru23 = ''
            for k,v in jmlrru.items():
                ru23 = f'{ru23}+{v}*{k}'
            ru23 = ru23.replace('+','',1)
    datboq.append([s,ds.loc[0,'NE ID'],ds.loc[0,'Site_Name'],ds.loc[0,'Longitude'],ds.loc[0,'Latitude'],secl18,eb,antL9,antl18,antl21,antl23,ahl9,ahl18,ahl21,ahl23,ru9,ru18,ru21,ru23,ds.loc[0,'VENDOR']])

databoq = pd.DataFrame(datboq,columns=hedboq)
print(databoq)

writer = pd.ExcelWriter(f'{simpan}/BOQ Sumbagteng.xlsx',engine='xlsxwriter')
databoq.to_excel(writer,index=False,sheet_name='BOQ')
dafi.to_excel(writer,index=False,sheet_name='IRR')
writer.close()

end_time = time.time()
print (f'Execution time:{end_time-start_time} seconds')
