import pandas as pd
import psycopg2
from sqlalchemy import create_engine
import time
start_time = time.time()

# File path
file_path = r"D:\TSEL\RCI\Cell\rci_redcell_week_4G_W30_2024_new.csv"

# Load data from CSV
data = pd.read_csv(file_path)
data = data[data['region']=='SUMBAGTENG'].reset_index()

# Database connection configuration
DB_NAME = 'tsel'
DB_USER = 'postgres'
DB_PASSWORD = '1234'
DB_HOST = 'localhost'
DB_PORT = 5432

# Define PostgreSQL connection string
connection_string = f'postgresql://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}'

# Create SQLAlchemy engine
engine = create_engine(connection_string)

# Define table creation SQL statement dynamically based on the dataframe columns
def generate_create_table_sql(table_name, df):
    sql = f"CREATE TABLE IF NOT EXISTS {table_name} ("
    for column in df.columns:
        col_name = f"\"{column}\""  # Wrap column name with double quotes
        col_type = "TEXT"  # Default to TEXT
        if df[column].dtype == "int64":
            col_type = "INTEGER"
        elif df[column].dtype == "float64":
            col_type = "DOUBLE PRECISION"
        sql += f"{col_name} {col_type}, "
    sql = sql.rstrip(', ') + ");"
    return sql

# Generate CREATE TABLE statement
table_name = "rci_cell"
create_table_sql = generate_create_table_sql(table_name, data)

# Connect to PostgreSQL and execute table creation
try:
    # Connect to the PostgreSQL database
    with psycopg2.connect(
        dbname=DB_NAME,
        user=DB_USER,
        password=DB_PASSWORD,
        host=DB_HOST,
        port=DB_PORT,
    ) as conn:
        with conn.cursor() as cur:
            # Execute the CREATE TABLE statement
            cur.execute(create_table_sql)
            print(f"Table {table_name} created successfully.")
            
            # Load data into the table
            for _, row in data.iterrows():
                columns = ', '.join([f"\"{col}\"" for col in data.columns])
                values = ', '.join(['%s'] * len(data.columns))
                insert_query = f"INSERT INTO {table_name} ({columns}) VALUES ({values})"
                cur.execute(insert_query, tuple(row))
            conn.commit()
            print(f"Data loaded into {table_name} successfully.")
except Exception as e:
    print(f"An error occurred: {e}")

end_time = time.time()
dursec = end_time-start_time
durmen = dursec / 60
print (f'Execution time:{end_time-start_time:.2f} seconds atau {durmen:.2f} menit oleh Premanzx')
